// Á∞°ÂåñÁâà Orange Stock ÊáâÁî®Á®ãÂºè
class OrangeStockApp {
    constructor() {
        this.socket = null;
        this.chart = null;
        this.currentUser = null;
        this.currentPrice = 100.00;
        this.selectedPeriod = '1h';
        
        console.log('üçä Orange Stock ÊáâÁî®Á®ãÂºèÂïüÂãï...');
        this.init();
    }

    init() {
        // Á´ãÂç≥Èö±ËóèËºâÂÖ•Áï´Èù¢
        this.hideLoadingOverlay();
        
        // ÂàùÂßãÂåñÂêÑÂÄãÂäüËÉΩ
        this.checkAuthStatus();
        this.bindEvents();
        this.setupDefaultView();
        this.connectWebSocket();
        
        console.log('‚úÖ Orange Stock ÂàùÂßãÂåñÂÆåÊàê');
    }

    hideLoadingOverlay() {
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) {
            overlay.style.display = 'none';
        }
    }

    setupDefaultView() {
        // Ë®≠ÁΩÆÈ†êË®≠Áµ±Ë®àÊï∏Êìö
        document.getElementById('heroCurrentPrice').textContent = '$100.00';
        document.getElementById('heroPriceChange').textContent = '+0.00%';
        document.getElementById('heroVolume').textContent = '0';
        
        // Áπ™Ë£ΩÈ†êË®≠ÂúñË°®
        this.renderDefaultChart();
    }

    checkAuthStatus() {
        const token = localStorage.getItem('orangeToken');
        if (token) {
            // È©óË≠âtoken‰∏¶Áç≤ÂèñÁî®Êà∂‰ø°ÊÅØ
            this.verifyTokenAndLoadUser(token);
        } else {
            this.showAuthSection();
        }
    }

    async verifyTokenAndLoadUser(token) {
        try {
            // ÂòóË©¶‰ΩøÁî®tokenÁç≤ÂèñÁî®Êà∂Ë≥áÁî¢‰ø°ÊÅØ‰æÜÈ©óË≠âtoken
            const response = await fetch('/api/trading/portfolio', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // TokenÊúâÊïàÔºåË®≠ÁΩÆÁî®Êà∂‰ø°ÊÅØ
                    this.currentUser = {
                        id: 1, // ‰ΩøÁî®ÈªòË™çÂÄºÔºåÂØ¶ÈöõIDÊúÉÂú®ÈúÄË¶ÅÊôÇÂæûJWT token‰∏≠Ëß£Êûê
                        username: 'User',
                        token: token
                    };
                    
                    this.showTradingSection();
                    await this.loadUserPortfolio();
                    return;
                }
            }
            
            // TokenÁÑ°ÊïàÔºåÊ∏ÖÈô§‰∏¶È°ØÁ§∫ÁôªÂÖ•ÁïåÈù¢
            localStorage.removeItem('orangeToken');
            this.showAuthSection();
        } catch (error) {
            console.error('È©óË≠âtokenÂ§±Êïó:', error);
            localStorage.removeItem('orangeToken');
            this.showAuthSection();
        }
    }

    bindEvents() {
        // ÁôªÂÖ•/Ë®ªÂÜäÊåâÈàï
        document.getElementById('loginBtn').addEventListener('click', () => this.showLoginForm());
        document.getElementById('registerBtn').addEventListener('click', () => this.showRegisterForm());
        document.getElementById('logoutBtn').addEventListener('click', () => this.logout());

        // Ë°®ÂñÆÊèê‰∫§
        document.getElementById('loginForm').addEventListener('submit', (e) => this.handleLogin(e));
        document.getElementById('registerForm').addEventListener('submit', (e) => this.handleRegister(e));

        // ‰∫§ÊòìÊåâÈàï
        document.getElementById('buyBtn').addEventListener('click', () => this.handleTrade('buy'));
        document.getElementById('sellBtn').addEventListener('click', () => this.handleTrade('sell'));

        // ‰∫§ÊòìÊï∏ÈáèËÆäÊõ¥
        document.getElementById('tradeQuantity').addEventListener('input', () => this.updateTradeCosts());

        // ÂúñË°®ÊôÇÈñìÊÆµÂàáÊèõ
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const period = e.target.dataset.period;
                this.changePeriod(period);
            });
        });

        // ÂÄã‰∫∫Ê™îÊ°à
        document.getElementById('profileBtn').addEventListener('click', () => this.showProfile());
        document.getElementById('closeProfileBtn').addEventListener('click', () => this.hideProfile());

        // ËÇ°Á•®‰ø°ÊÅØÈù¢Êùø
        document.getElementById('stockInfoBtn').addEventListener('click', () => this.toggleStockInfo());

        // ÁÆ°ÁêÜÂì°Èù¢Êùø
        const adminPanelBtn = document.getElementById('adminPanelBtn');
        if (adminPanelBtn) {
            adminPanelBtn.addEventListener('click', () => this.showAdminPanel());
        }

        const closeAdminBtn = document.getElementById('closeAdminBtn');
        if (closeAdminBtn) {
            closeAdminBtn.addEventListener('click', () => this.hideAdminPanel());
        }

        // ÈôêÂÉπÂñÆÂäüËÉΩ
        document.getElementById('createLimitOrderBtn').addEventListener('click', () => this.createLimitOrder());

        // ÊôÇÈñìÊÆµÂàáÊèõÊåâÈàï
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const period = e.target.dataset.period;
                if (period) {
                    this.changePeriod(period);
                }
            });
        });

        // ÊâãÊ©üËèúÂñÆÂàáÊèõ
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        if (mobileMenuToggle) {
            mobileMenuToggle.addEventListener('click', () => {
                const navMenu = document.getElementById('navMenu');
                navMenu.classList.toggle('active');
            });
        }

        // === Êñ∞Â¢ûÂäüËÉΩ‰∫ã‰ª∂Á∂ÅÂÆö ===
        
        // ‰∫§ÊòìÊ®°ÂºèÂàáÊèõ
        const tradeModeInputs = document.querySelectorAll('input[name="tradeMode"]');
        tradeModeInputs.forEach(input => {
            input.addEventListener('change', (e) => this.handleTradeModeChange(e.target.value));
        });

        // ÈôêÂÉπÂÉπÊ†ºËº∏ÂÖ•ËÆäÊõ¥
        const limitPriceInput = document.getElementById('limitPrice');
        if (limitPriceInput) {
            limitPriceInput.addEventListener('input', () => this.updateTradeCosts());
        }

        // ÂÉπÊ†ºË®≠ÁΩÆÊåâÈàï
        document.getElementById('priceSettingsBtn').addEventListener('click', () => this.showPriceSettings());
        document.getElementById('closePriceSettingsBtn').addEventListener('click', () => this.hidePriceSettings());

        // ÂÉπÊ†ºË®≠ÁΩÆÊªëÊ°ø
        this.bindPriceSettingsSliders();

        // ÂÉπÊ†ºË®≠ÁΩÆÊåâÈàï
        document.getElementById('saveSettingsBtn').addEventListener('click', () => this.savePriceSettings());
        document.getElementById('resetSettingsBtn').addEventListener('click', () => this.resetPriceSettings());

        // Ê®°ÊÖãÊ°ÜÈªûÊìäÂ§ñÈÉ®ÈóúÈñâ
        document.getElementById('priceSettingsModal').addEventListener('click', (e) => {
            if (e.target.id === 'priceSettingsModal') {
                this.hidePriceSettings();
            }
        });
    }

    connectWebSocket() {
        try {
            this.socket = io();
            
            this.socket.on('connect', () => {
                console.log('‚úÖ WebSocket ÈÄ£Êé•ÊàêÂäü');
                this.updateConnectionStatus(true);
                this.showNotification('Â∑≤ÈÄ£Êé•Âà∞ÊúçÂãôÂô®', 'success');
            });

            this.socket.on('disconnect', () => {
                console.log('‚ùå WebSocket ÈÄ£Êé•‰∏≠Êñ∑');
                this.updateConnectionStatus(false);
            });

            this.socket.on('stock_price_update', (data) => {
                if (data && data.price) {
                    this.updateStockPrice(data);
                }
            });
        } catch (error) {
            console.error('WebSocket ÈÄ£Êé•Â§±Êïó:', error);
            this.updateConnectionStatus(false);
        }
    }

    showAuthSection() {
        const authSection = document.getElementById('authSection');
        const tradingSection = document.getElementById('tradingSection');
        const navAuth = document.getElementById('navAuth');
        const navUserInfo = document.getElementById('navUserInfo');
        
        if (authSection) authSection.style.display = 'block';
        if (tradingSection) tradingSection.style.display = 'none';
        if (navAuth) navAuth.style.display = 'flex';
        if (navUserInfo) navUserInfo.style.display = 'none';
        
        this.showLoginForm();
    }

    showTradingSection() {
        const authSection = document.getElementById('authSection');
        const tradingSection = document.getElementById('tradingSection');
        const navAuth = document.getElementById('navAuth');
        const navUserInfo = document.getElementById('navUserInfo');
        
        if (authSection) authSection.style.display = 'none';
        if (tradingSection) tradingSection.style.display = 'block';
        if (navAuth) navAuth.style.display = 'none';
        if (navUserInfo) navUserInfo.style.display = 'flex';
        
        // Ë®≠ÁΩÆÈ†êË®≠Áî®Êà∂‰ø°ÊÅØ
        this.updatePortfolioUI({
            points: 10000,
            orangeShares: 0,
            currentPrice: 100.00,
            stockValue: 0,
            totalValue: 10000
        });
    }

    showLoginForm() {
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        
        if (loginForm) loginForm.style.display = 'block';
        if (registerForm) registerForm.style.display = 'none';
    }

    showRegisterForm() {
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        
        if (loginForm) loginForm.style.display = 'none';
        if (registerForm) registerForm.style.display = 'block';
    }

    async handleLogin(e) {
        e.preventDefault();
        
        const username = document.getElementById('loginUsername').value;
        const password = document.getElementById('loginPassword').value;
        
        if (!username || !password) {
            this.showNotification('Ë´ãËº∏ÂÖ•Áî®Êà∂ÂêçÂíåÂØÜÁ¢º', 'error');
            return;
        }

        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });

            const result = await response.json();
            
            if (result.success) {
                localStorage.setItem('orangeToken', result.token);
                
                // Ë®≠ÁΩÆÁï∂ÂâçÁî®Êà∂‰ø°ÊÅØ
                this.currentUser = {
                    id: result.user.id,
                    username: result.user.username,
                    email: result.user.email,
                    role: result.user.role
                };
                
                this.showNotification('ÁôªÂÖ•ÊàêÂäüÔºÅ', 'success');
                this.showTradingSection();
                await this.loadUserPortfolio();
                
                // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÁÆ°ÁêÜÂì°Áî®Êà∂‰∏¶È°ØÁ§∫ÁÆ°ÁêÜÂì°ÊåâÈàï
                if (result.user.role === 'admin') {
                    const adminBtn = document.getElementById('adminPanelBtn');
                    if (adminBtn) {
                        adminBtn.style.display = 'block';
                    }
                    console.log('‚úÖ ÁÆ°ÁêÜÂì°Áî®Êà∂Â∑≤ÁôªÂÖ•ÔºåÁÆ°ÁêÜÈù¢ÊùøÂèØÁî®');
                }
            } else {
                this.showNotification(result.message || 'ÁôªÂÖ•Â§±Êïó', 'error');
            }
        } catch (error) {
            console.error('ÁôªÂÖ•ÈåØË™§:', error);
            this.showNotification('ÁôªÂÖ•ËôïÁêÜÂ§±Êïó', 'error');
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        
        const username = document.getElementById('registerUsername').value;
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;

        if (!username || !email || !password) {
            this.showNotification('Ë´ãÂ°´ÂØ´ÊâÄÊúâÊ¨Ñ‰Ωç', 'error');
            return;
        }

        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password })
            });

            const data = await response.json();
            
            if (data.success) {
                this.showNotification('Ë®ªÂÜäÊàêÂäüÔºÅË´ãÁôªÂÖ•', 'success');
                this.showLoginForm();
                document.getElementById('loginUsername').value = username;
            } else {
                this.showNotification(data.message || 'Ë®ªÂÜäÂ§±Êïó', 'error');
            }
        } catch (error) {
            console.error('Ë®ªÂÜäÈåØË™§:', error);
            this.showNotification('Ë®ªÂÜäÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶', 'error');
        }
    }

    logout() {
        localStorage.removeItem('orangeToken');
        this.currentUser = null;
        
        // Èö±ËóèÁÆ°ÁêÜÂì°ÊåâÈàï
        const adminBtn = document.getElementById('adminPanelBtn');
        if (adminBtn) {
            adminBtn.style.display = 'none';
        }
        
        // ÈóúÈñâÁÆ°ÁêÜÂì°Èù¢Êùø
        this.hideAdminPanel();
        
        this.showAuthSection();
    }

    async loadUserPortfolio() {
        try {
            const token = localStorage.getItem('orangeToken');
            if (!token) return;

            const response = await fetch('/api/trading/portfolio', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            const data = await response.json();
            if (data.success) {
                this.updatePortfolioUI(data.portfolio);
                
                // Êõ¥Êñ∞Â∞éËà™Ê¨ÑÁî®Êà∂‰ø°ÊÅØ
                const navUserPoints = document.getElementById('navUserPoints');
                const navUserName = document.getElementById('navUserName');
                if (navUserPoints) navUserPoints.textContent = `üí∞ ${Math.floor(data.portfolio.points)}`;
                if (navUserName) navUserName.textContent = this.currentUser?.username || 'User';
            }
        } catch (error) {
            console.error('ËºâÂÖ•Áî®Êà∂Ë≥áÁî¢Â§±Êïó:', error);
        }
    }

    updatePortfolioUI(portfolio) {
        const userPoints = document.getElementById('userPoints');
        const navUserPoints = document.getElementById('navUserPoints');
        const userShares = document.getElementById('userShares');
        const stockValue = document.getElementById('stockValue');
        const totalValue = document.getElementById('totalValue');
        const currentPrice = document.getElementById('currentPrice');
        
        if (userPoints) userPoints.textContent = portfolio.points;
        if (navUserPoints) navUserPoints.textContent = `üí∞ ${portfolio.points}`;
        if (userShares) userShares.textContent = `${portfolio.orangeShares} ËÇ°`;
        if (stockValue) stockValue.textContent = `$${portfolio.stockValue.toFixed(2)}`;
        if (totalValue) totalValue.textContent = `$${portfolio.totalValue.toFixed(2)}`;
        if (currentPrice) currentPrice.textContent = `$${portfolio.currentPrice.toFixed(2)}`;
        
        this.currentPrice = portfolio.currentPrice;
        this.updateTradeCosts();
    }

    updateTradeCosts() {
        const quantity = parseInt(document.getElementById('tradeQuantity').value) || 1;
        const totalCost = this.currentPrice * quantity;
        
        const buyCost = document.getElementById('buyCost');
        const sellRevenue = document.getElementById('sellRevenue');
        
        if (buyCost) buyCost.textContent = `$${totalCost.toFixed(2)}`;
        if (sellRevenue) sellRevenue.textContent = `$${totalCost.toFixed(2)}`;
    }

    // Âä†Ëºâ‰∏¶Ê∏≤ÊüìËÇ°ÂÉπÂúñË°®ÔºàÁúüÂØ¶Êï∏ÊìöÔºâ
    async loadStockChart(period = '24h') {
        const canvas = document.getElementById('stockChart');
        if (!canvas) {
            console.error('Êâæ‰∏çÂà∞ÂúñË°®ÂÖÉÁ¥†');
            return;
        }

        try {
            console.log(`üìà ËºâÂÖ• ${period} ÁúüÂØ¶ÂúñË°®Êï∏Êìö...`);
            
            // ÂæûAPIÂä†ËºâÁúüÂØ¶Ê≠∑Âè≤Êï∏Êìö
            const response = await fetch(`/api/stock/history/${period}`);
            const result = await response.json();
            
            let chartData = [];
            if (result.success && result.data.length > 0) {
                chartData = result.data;
                console.log(`‚úÖ ËºâÂÖ•‰∫Ü ${chartData.length} ÂÄãÁúüÂØ¶Êï∏ÊìöÈªû`);
            } else {
                // Â¶ÇÊûúÊ≤íÊúâÊï∏ÊìöÔºåÁîüÊàêÂü∫Êú¨Êï∏Êìö
                chartData = this.generateMockData(period);
                console.log('‚ö†Ô∏è ‰ΩøÁî®Ê®°Êì¨Êï∏Êìö');
            }
            
            this.renderChart(chartData, period);
            
        } catch (error) {
            console.error('ËºâÂÖ•ËÇ°ÂÉπÊ≠∑Âè≤Â§±Êïó:', error);
            // Â¶ÇÊûúAPIÂ§±ÊïóÔºå‰ΩøÁî®Ê®°Êì¨Êï∏Êìö
            this.renderChart(this.generateMockData(period), period);
        }
    },

    // ÁîüÊàêÊ®°Êì¨Êï∏ÊìöÔºàÁï∂Ê≤íÊúâÁúüÂØ¶Êï∏ÊìöÊôÇÔºâ
    generateMockData(period) {
        const now = Date.now();
        const intervals = {
            '1h': { count: 12, step: 5 * 60 * 1000 }, // 5ÂàÜÈêòÈñìÈöî
            '24h': { count: 24, step: 60 * 60 * 1000 }, // 1Â∞èÊôÇÈñìÈöî
            '7d': { count: 7, step: 24 * 60 * 60 * 1000 }, // 1Â§©ÈñìÈöî
            '30d': { count: 30, step: 24 * 60 * 60 * 1000 } // 1Â§©ÈñìÈöî
        };
        
        const config = intervals[period] || intervals['24h'];
        const mockData = [];
        let basePrice = this.currentPrice || 10.00;
        
        for (let i = config.count - 1; i >= 0; i--) {
            const timestamp = new Date(now - (i * config.step)).toISOString();
            basePrice += (Math.random() - 0.5) * 0.5; // ËºÉÂ∞èÁöÑÈö®Ê©üÊ≥¢Âãï
            basePrice = Math.max(5, Math.min(20, basePrice)); // ÈôêÂà∂ÁØÑÂúç
            
            mockData.push({
                price: Math.round(basePrice * 100) / 100,
                timestamp: timestamp,
                volume: Math.floor(Math.random() * 50) + 10,
                type: 'mock'
            });
        }
        
        return mockData;
    },

    // Ê∏≤ÊüìÂúñË°®
    renderChart(data, period) {
        const canvas = document.getElementById('stockChart');
        if (!canvas) return;
        
        try {
            const ctx = canvas.getContext('2d');
            
            // Èä∑ÊØÄÁèæÊúâÂúñË°®
            if (this.chart) {
                this.chart.destroy();
            }

            // ËôïÁêÜÊ®ôÁ±§Ê†ºÂºè
            const labels = data.map(item => {
                const date = new Date(item.timestamp);
                switch (period) {
                    case '1h':
                        return date.toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' });
                    case '24h':
                        return date.toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' });
                    case '7d':
                        return date.toLocaleDateString('zh-TW', { month: 'short', day: 'numeric' });
                    case '30d':
                        return date.toLocaleDateString('zh-TW', { month: 'short', day: 'numeric' });
                    default:
                        return date.toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' });
                }
            });

            const prices = data.map(item => item.price);
            const volumes = data.map(item => item.volume || 0);

            // Ë®àÁÆóÁµ±Ë®àÊï∏Êìö
            const openPrice = prices.length > 0 ? prices[0] : this.currentPrice;
            const currentPrice = prices.length > 0 ? prices[prices.length - 1] : this.currentPrice;
            const highPrice = Math.max(...prices);
            const lowPrice = Math.min(...prices);
            const priceChange = currentPrice - openPrice;
            const priceChangePercent = openPrice > 0 ? (priceChange / openPrice * 100) : 0;
            const totalVolume = volumes.reduce((sum, vol) => sum + vol, 0);

            // Êõ¥Êñ∞Áµ±Ë®àÈ°ØÁ§∫
            this.updateChartStats({
                openPrice,
                currentPrice,
                highPrice,
                lowPrice,
                priceChange,
                priceChangePercent,
                totalVolume
            });

            this.chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'OrangeËÇ°ÂÉπ',
                        data: prices,
                        borderColor: priceChange >= 0 ? '#4ade80' : '#ef4444',
                        backgroundColor: priceChange >= 0 ? 'rgba(74, 222, 128, 0.1)' : 'rgba(239, 68, 68, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: priceChange >= 0 ? '#4ade80' : '#ef4444',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 3,
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#ff6b35',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const volume = volumes[context.dataIndex] || 0;
                                    return [
                                        `ÂÉπÊ†º: $${context.parsed.y.toFixed(2)}`,
                                        `Êàê‰∫§Èáè: ${volume}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: { color: 'rgba(255, 255, 255, 0.1)' },
                            ticks: { color: '#b8b8d4' }
                        },
                        y: {
                            grid: { color: 'rgba(255, 255, 255, 0.1)' },
                            ticks: {
                                color: '#b8b8d4',
                                callback: function(value) {
                                    return '$' + value.toFixed(2);
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        intersect: false
                    }
                }
            });
            
            console.log(`‚úÖ ÂúñË°®Ê∏≤ÊüìÂÆåÊàê - ${data.length} ÂÄãÊï∏ÊìöÈªû`);
            
        } catch (error) {
            console.error('ÂúñË°®Ê∏≤ÊüìÂ§±Êïó:', error);
        }
    },

    // Êõ¥Êñ∞ÂúñË°®Áµ±Ë®àÊï∏ÊìöÈ°ØÁ§∫
    updateChartStats(stats) {
        // Êõ¥Êñ∞ÂÉπÊ†ºÈ°ØÁ§∫
        const currentPriceEl = document.getElementById('currentPrice');
        const heroPriceEl = document.getElementById('heroCurrentPrice');
        
        if (currentPriceEl) currentPriceEl.textContent = `$${stats.currentPrice.toFixed(2)}`;
        if (heroPriceEl) heroPriceEl.textContent = `$${stats.currentPrice.toFixed(2)}`;
        
        // Êõ¥Êñ∞Êº≤Ë∑åÈ°ØÁ§∫
        this.updatePriceChangeDisplay(stats.priceChange, stats.priceChangePercent);
        
        // Êõ¥Êñ∞Êàê‰∫§Èáè
        this.updateVolumeDisplay(stats.totalVolume);
        
        // Êõ¥Êñ∞È´ò‰ΩéÈªû
        this.updateHighLowDisplay(stats.highPrice, stats.lowPrice);
    },

    // Êõ¥Êñ∞ÂÉπÊ†ºËÆäÂãïÈ°ØÁ§∫
    updatePriceChangeDisplay(priceChange, priceChangePercent) {
        const changeElements = document.querySelectorAll('.price-change');
        const changeText = `${priceChange >= 0 ? '+' : ''}${priceChange.toFixed(2)} (${priceChangePercent >= 0 ? '+' : ''}${priceChangePercent.toFixed(2)}%)`;
        const changeClass = priceChange >= 0 ? 'positive' : 'negative';
        
        changeElements.forEach(el => {
            el.textContent = changeText;
            el.className = `price-change ${changeClass}`;
        });
        
        // Â¶ÇÊûúÊ≤íÊúâÂ∞àÈñÄÁöÑÂÖÉÁ¥†ÔºåÂâµÂª∫ÊàñÊõ¥Êñ∞ÁèæÊúâÈ°ØÁ§∫
        let heroPriceChangeEl = document.getElementById('heroPriceChange');
        if (!heroPriceChangeEl) {
            // Êü•ÊâæÂêàÈÅ©ÁöÑ‰ΩçÁΩÆÊ∑ªÂä†Êº≤Ë∑åÈ°ØÁ§∫
            const heroStatsEl = document.querySelector('.hero-stats');
            if (heroStatsEl) {
                heroPriceChangeEl = document.createElement('div');
                heroPriceChangeEl.id = 'heroPriceChange';
                heroPriceChangeEl.className = `price-change ${changeClass}`;
                heroPriceChangeEl.textContent = changeText;
                heroStatsEl.appendChild(heroPriceChangeEl);
            }
        } else {
            heroPriceChangeEl.textContent = changeText;
            heroPriceChangeEl.className = `price-change ${changeClass}`;
        }
    },

    // Êõ¥Êñ∞Êàê‰∫§ÈáèÈ°ØÁ§∫
    updateVolumeDisplay(totalVolume) {
        let volumeEl = document.getElementById('totalVolume');
        if (!volumeEl) {
            // Â¶ÇÊûúÊ≤íÊúâÊàê‰∫§ÈáèÂÖÉÁ¥†ÔºåÂèØ‰ª•ÂâµÂª∫‰∏ÄÂÄã
            const heroStatsEl = document.querySelector('.hero-stats');
            if (heroStatsEl) {
                volumeEl = document.createElement('div');
                volumeEl.id = 'totalVolume';
                volumeEl.className = 'volume-display';
                volumeEl.innerHTML = `<span class="volume-label">Êàê‰∫§Èáè:</span> <span class="volume-value">${totalVolume}</span>`;
                heroStatsEl.appendChild(volumeEl);
            }
        } else {
            const volumeValueEl = volumeEl.querySelector('.volume-value');
            if (volumeValueEl) {
                volumeValueEl.textContent = totalVolume;
            } else {
                volumeEl.textContent = `Êàê‰∫§Èáè: ${totalVolume}`;
            }
        }
    },

    // Êõ¥Êñ∞ÊúÄÈ´òÊúÄ‰ΩéÂÉπÈ°ØÁ§∫
    updateHighLowDisplay(highPrice, lowPrice) {
        let highLowEl = document.getElementById('highLow');
        if (!highLowEl) {
            const heroStatsEl = document.querySelector('.hero-stats');
            if (heroStatsEl) {
                highLowEl = document.createElement('div');
                highLowEl.id = 'highLow';
                highLowEl.className = 'high-low-display';
                highLowEl.innerHTML = `<span>ÊúÄÈ´ò: $${highPrice.toFixed(2)}</span> <span>ÊúÄ‰Ωé: $${lowPrice.toFixed(2)}</span>`;
                heroStatsEl.appendChild(highLowEl);
            }
        } else {
            highLowEl.innerHTML = `<span>ÊúÄÈ´ò: $${highPrice.toFixed(2)}</span> <span>ÊúÄ‰Ωé: $${lowPrice.toFixed(2)}</span>`;
        }
    },

    // ÊõøÊèõÂéü‰æÜÁöÑrenderDefaultChartÊñπÊ≥ï
    renderDefaultChart() {
        // ËºâÂÖ•ÁúüÂØ¶Êï∏ÊìöÂúñË°®
        this.loadStockChart('24h');
    },

    changePeriod(period) {
        this.selectedPeriod = period;
        
        // Êõ¥Êñ∞ÊåâÈàïÊ®£Âºè
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const activeBtn = document.querySelector(`[data-period="${period}"]`);
        if (activeBtn) activeBtn.classList.add('active');
        
        console.log(`ÂàáÊèõÂà∞ ${period} ÊôÇÈñìÊÆµ`);
        
        // ÈáçÊñ∞ËºâÂÖ•Â∞çÊáâÊôÇÈñìÊÆµÁöÑÂúñË°®
        this.loadStockChart(period);
    },

    updateStockPrice(data) {
        this.currentPrice = data.price;
        
        const heroPrice = document.getElementById('heroCurrentPrice');
        const currentPrice = document.getElementById('currentPrice');
        
        if (heroPrice) heroPrice.textContent = `$${data.price.toFixed(2)}`;
        if (currentPrice) currentPrice.textContent = `$${data.price.toFixed(2)}`;
        
        this.updateTradeCosts();
    },

    updateConnectionStatus(connected) {
        const statusDot = document.querySelector('.status-dot');
        const statusText = document.querySelector('.status-text');
        
        if (statusDot) {
            if (connected) {
                statusDot.classList.remove('disconnected');
            } else {
                statusDot.classList.add('disconnected');
            }
        }
        
        if (statusText) {
            statusText.textContent = connected ? 'Â∑≤ÈÄ£Êé•' : 'ÈÄ£Êé•‰∏≠Êñ∑';
        }
    },

    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        if (!notification) return;
        
        notification.textContent = message;
        notification.className = `notification ${type} show`;

        setTimeout(() => {
            notification.classList.remove('show');
        }, 4000);
    },

    // È°ØÁ§∫ÂÄã‰∫∫Ê™îÊ°à
    showProfile() {
        const profileSection = document.getElementById('profileSection');
        if (profileSection) {
            profileSection.style.display = 'flex';
            this.loadProfileData();
        }
    },

    // Èö±ËóèÂÄã‰∫∫Ê™îÊ°à
    hideProfile() {
        const profileSection = document.getElementById('profileSection');
        if (profileSection) {
            profileSection.style.display = 'none';
        }
    },

    // ËºâÂÖ•ÂÄã‰∫∫Ê™îÊ°àÊï∏Êìö
    async loadProfileData() {
        if (!this.currentUser) return;

        try {
            // ËºâÂÖ•Áî®Êà∂Âü∫Êú¨‰ø°ÊÅØ
            document.getElementById('profileUsername').textContent = this.currentUser.username || 'Unknown';
            document.getElementById('profileJoinDate').textContent = '2024-01-01'; // Ê®°Êì¨Êï∏Êìö
            document.getElementById('profileLastLogin').textContent = new Date().toLocaleString('zh-TW');

            // ËºâÂÖ•Ë≥áÁî¢‰ø°ÊÅØ (Ê®°Êì¨Êï∏ÊìöÔºåÂõ†ÁÇ∫loadUserPortfolio‰∏çËøîÂõûÂÄº)
            this.updateProfileAssets({
                points: 10000,
                orangeShares: 0,
                currentPrice: this.currentPrice,
                stockValue: 0,
                totalValue: 10000,
                profitLoss: 0,
                profitLossPercentage: 0
            });

            // ËºâÂÖ•‰∫§ÊòìÁµ±Ë®à
            this.loadTradingStats();

            // ËºâÂÖ•ÈôêÂÉπÂñÆ
            this.loadLimitOrders();

            // ËºâÂÖ•Ë©≥Á¥∞‰∫§ÊòìÊ≠∑Âè≤
            this.loadDetailedHistory();

        } catch (error) {
            console.error('ËºâÂÖ•ÂÄã‰∫∫Ê™îÊ°àÂ§±Êïó:', error);
        }
    },

    // Êõ¥Êñ∞ÂÄã‰∫∫Ê™îÊ°àË≥áÁî¢‰ø°ÊÅØ
    updateProfileAssets(portfolio) {
        document.getElementById('profilePoints').textContent = portfolio.points;
        document.getElementById('profileShares').textContent = `${portfolio.orangeShares} ËÇ°`;
        document.getElementById('profileStockValue').textContent = `$${portfolio.stockValue.toFixed(2)}`;
        document.getElementById('profileTotalValue').textContent = `$${portfolio.totalValue.toFixed(2)}`;
        
        const profitLoss = portfolio.profitLoss || 0;
        const profitLossElement = document.getElementById('profileProfitLoss');
        const profitRateElement = document.getElementById('profileProfitRate');
        
        profitLossElement.textContent = `$${profitLoss.toFixed(2)}`;
        profitLossElement.style.color = profitLoss >= 0 ? '#4ecdc4' : '#ff6b6b';
        
        const profitRate = portfolio.profitLossPercentage || 0;
        profitRateElement.textContent = `${profitRate >= 0 ? '+' : ''}${profitRate.toFixed(2)}%`;
        profitRateElement.style.color = profitRate >= 0 ? '#4ecdc4' : '#ff6b6b';
    },

    // ËºâÂÖ•‰∫§ÊòìÁµ±Ë®à
    async loadTradingStats() {
        if (!this.currentUser) return;

        try {
            const response = await fetch('/api/stock/transactions', {
                headers: { 'Authorization': `Bearer ${this.currentUser.token}` }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    const transactions = data.transactions;
                    
                    const totalTrades = transactions.length;
                    const buyTrades = transactions.filter(t => t.type === 'buy').length;
                    const sellTrades = transactions.filter(t => t.type === 'sell').length;
                    
                    const buyTransactions = transactions.filter(t => t.type === 'buy');
                    const avgBuyPrice = buyTransactions.length > 0 ? 
                        buyTransactions.reduce((sum, t) => sum + t.price, 0) / buyTransactions.length : 0;

                    document.getElementById('totalTrades').textContent = totalTrades;
                    document.getElementById('buyTrades').textContent = buyTrades;
                    document.getElementById('sellTrades').textContent = sellTrades;
                    document.getElementById('avgBuyPrice').textContent = `$${avgBuyPrice.toFixed(2)}`;
                }
            }
        } catch (error) {
            console.error('ËºâÂÖ•‰∫§ÊòìÁµ±Ë®àÂ§±Êïó:', error);
        }
    },

    // ÂâµÂª∫ÈôêÂÉπÂñÆ
    async createLimitOrder() {
        if (!this.currentUser) {
            this.showNotification('Ë´ãÂÖàÁôªÂÖ•', 'error');
            return;
        }

        const orderType = document.getElementById('limitOrderType').value;
        const quantity = parseInt(document.getElementById('limitOrderQuantity').value);
        const limitPrice = parseFloat(document.getElementById('limitOrderPrice').value);

        if (!quantity || quantity <= 0 || !limitPrice || limitPrice <= 0) {
            this.showNotification('Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÊï∏ÈáèÂíåÂÉπÊ†º', 'error');
            return;
        }

        try {
            const response = await fetch('/api/limit-orders/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.currentUser.token}`
                },
                body: JSON.stringify({ orderType, quantity, limitPrice })
            });

            const data = await response.json();
            
            if (data.success) {
                this.showNotification(data.message, 'success');
                
                // Ê∏ÖÁ©∫Ë°®ÂñÆ
                document.getElementById('limitOrderQuantity').value = '';
                document.getElementById('limitOrderPrice').value = '';
                
                // ÈáçÊñ∞ËºâÂÖ•ÈôêÂÉπÂñÆÂàóË°®
                this.loadLimitOrders();
            } else {
                this.showNotification(data.message || 'ÂâµÂª∫ÈôêÂÉπÂñÆÂ§±Êïó', 'error');
            }

        } catch (error) {
            console.error('ÂâµÂª∫ÈôêÂÉπÂñÆÂ§±Êïó:', error);
            this.showNotification('ÂâµÂª∫ÈôêÂÉπÂñÆÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶', 'error');
        }
    },

    // ËºâÂÖ•ÈôêÂÉπÂñÆ
    async loadLimitOrders() {
        if (!this.currentUser) return;

        try {
            const response = await fetch('/api/limit-orders/list', {
                headers: { 'Authorization': `Bearer ${this.currentUser.token}` }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    this.renderLimitOrders(data.orders);
                }
            }
        } catch (error) {
            console.error('ËºâÂÖ•ÈôêÂÉπÂñÆÂ§±Êïó:', error);
        }
    },

    // Ê∏≤ÊüìÈôêÂÉπÂñÆÂàóË°®
    renderLimitOrders(orders) {
        const container = document.getElementById('limitOrdersList');
        if (!container) return;

        if (orders.length === 0) {
            container.innerHTML = `
                <div class="orders-empty">
                    <span class="empty-icon">üìã</span>
                    <p>ÁõÆÂâçÊ≤íÊúâÊ¥ªË∫çÁöÑÈôêÂÉπÂñÆ</p>
                </div>
            `;
            return;
        }

        const ordersHTML = orders.map(order => `
            <div class="order-item">
                <div class="order-info">
                    <span class="order-type ${order.type}">${order.type === 'buy' ? 'Ë≤∑ÂÖ•' : 'Ë≥£Âá∫'}</span>
                    <div class="order-details">${order.quantity} ËÇ° @ $${order.price.toFixed(2)}</div>
                </div>
                <button class="cancel-order-btn" onclick="window.orangeApp.cancelLimitOrder(${order.id})">
                    ÂèñÊ∂à
                </button>
            </div>
        `).join('');

        container.innerHTML = ordersHTML;
    },

    // ÂèñÊ∂àÈôêÂÉπÂñÆ
    async cancelLimitOrder(orderId) {
        if (!this.currentUser) return;

        try {
            const response = await fetch(`/api/limit-orders/${orderId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${this.currentUser.token}` }
            });

            const data = await response.json();
            
            if (data.success) {
                this.showNotification(data.message, 'info');
                this.loadLimitOrders();
            } else {
                this.showNotification(data.message || 'ÂèñÊ∂àÈôêÂÉπÂñÆÂ§±Êïó', 'error');
            }
        } catch (error) {
            console.error('ÂèñÊ∂àÈôêÂÉπÂñÆÂ§±Êïó:', error);
            this.showNotification('ÂèñÊ∂àÈôêÂÉπÂñÆÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶', 'error');
        }
    },

    // ËºâÂÖ•Ë©≥Á¥∞‰∫§ÊòìÊ≠∑Âè≤
    async loadDetailedHistory() {
        if (!this.currentUser) return;

        const historyContainer = document.getElementById('detailedHistoryList');
        if (!historyContainer) return;

        historyContainer.innerHTML = '<div class="history-loading">ËºâÂÖ•‰∏≠...</div>';

        try {
            const response = await fetch('/api/stock/transactions', {
                headers: { 'Authorization': `Bearer ${this.currentUser.token}` }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    let transactions = data.transactions;
                    
                    // ÊáâÁî®ÁØ©ÈÅ∏
                    const filterType = document.getElementById('historyFilter')?.value || 'all';
                    const filterPeriod = document.getElementById('historyPeriod')?.value || '7d';
                    
                    if (filterType !== 'all') {
                        transactions = transactions.filter(t => t.type === filterType);
                    }
                    
                    // ÊáâÁî®ÊôÇÈñìÁØ©ÈÅ∏ÔºàÁ∞°ÂåñÁâàÊú¨Ôºâ
                    if (filterPeriod !== 'all') {
                        const days = filterPeriod === '7d' ? 7 : 30;
                        const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
                        transactions = transactions.filter(t => new Date(t.timestamp) > cutoffDate);
                    }
                    
                    this.renderDetailedHistory(transactions);
                }
            } else {
                historyContainer.innerHTML = '<div class="history-loading">ËºâÂÖ•Â§±Êïó</div>';
            }
        } catch (error) {
            console.error('ËºâÂÖ•Ë©≥Á¥∞Ê≠∑Âè≤Â§±Êïó:', error);
            historyContainer.innerHTML = '<div class="history-loading">ËºâÂÖ•Â§±Êïó</div>';
        }
    },

    // Ê∏≤ÊüìË©≥Á¥∞‰∫§ÊòìÊ≠∑Âè≤
    renderDetailedHistory(transactions) {
        const container = document.getElementById('detailedHistoryList');
        if (!container) return;

        if (transactions.length === 0) {
            container.innerHTML = `
                <div class="history-empty">
                    <span class="empty-icon">üìù</span>
                    <p>Ê≤íÊúâÁ¨¶ÂêàÊ¢ù‰ª∂ÁöÑ‰∫§ÊòìË®òÈåÑ</p>
                </div>
            `;
            return;
        }

        const historyHTML = transactions.map(tx => {
            const date = new Date(tx.timestamp);
            const typeClass = tx.type === 'buy' ? 'buy' : 'sell';
            const typeText = tx.type === 'buy' ? 'Ë≤∑ÂÖ•' : 'Ë≥£Âá∫';
            
            return `
                <div class="detailed-history-item">
                    <span class="transaction-type ${typeClass}">${typeText}</span>
                    <div class="transaction-info">
                        <div>${tx.quantity} ËÇ° @ $${tx.price.toFixed(2)}</div>
                        <div class="transaction-time">${date.toLocaleString('zh-TW')}</div>
                    </div>
                    <div class="transaction-amount">$${tx.totalAmount.toFixed(2)}</div>
                </div>
            `;
        }).join('');

        container.innerHTML = historyHTML;
    }

    // Ê∑ªÂä†Êñ∞ÁöÑËºîÂä©ÊñπÊ≥ï
    updateStockPrice(data) {
        this.currentPrice = data.price;
        
        const heroPrice = document.getElementById('heroCurrentPrice');
        const currentPrice = document.getElementById('currentPrice');
        
        if (heroPrice) heroPrice.textContent = `$${data.price.toFixed(2)}`;
        if (currentPrice) currentPrice.textContent = `$${data.price.toFixed(2)}`;
        
        this.updateTradeCosts();
    }

    updateConnectionStatus(connected) {
        const statusEl = document.getElementById('connectionStatus');
        if (statusEl) {
            statusEl.className = connected ? 'connection-status connected' : 'connection-status disconnected';
            const statusDot = statusEl.querySelector('.status-dot');
            const statusText = statusEl.querySelector('.status-text');
            if (statusDot) statusDot.className = connected ? 'status-dot connected' : 'status-dot disconnected';
            if (statusText) statusText.textContent = connected ? 'Â∑≤ÈÄ£Êé•' : 'ÈÄ£Êé•‰∏≠Êñ∑';
        }
    }

    changePeriod(period) {
        this.selectedPeriod = period;
        
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const activeBtn = document.querySelector(`[data-period="${period}"]`);
        if (activeBtn) activeBtn.classList.add('active');
        
        console.log(`ÂàáÊèõÂà∞ ${period} ÊôÇÈñìÊÆµ`);
        
        // ÈáçÊñ∞ËºâÂÖ•Â∞çÊáâÊôÇÈñìÊÆµÁöÑÂúñË°®
        if (this.loadStockChart) {
            this.loadStockChart(period);
        }
    }
}

// === Êñ∞Â¢ûÂäüËÉΩÊñπÊ≥ï ===

// Ê∑ªÂä†Âà∞ OrangeStockApp È°ûÁöÑÂéüÂûã‰∏ä
Object.assign(OrangeStockApp.prototype, {
    // ËôïÁêÜ‰∫§ÊòìÊ®°ÂºèËÆäÊõ¥
    handleTradeModeChange(mode) {
        const limitPriceInput = document.getElementById('limitPriceInput');
        const buyBtnText = document.getElementById('buyBtnText');
        const sellBtnText = document.getElementById('sellBtnText');
        
        if (mode === 'limit') {
            limitPriceInput.style.display = 'block';
            buyBtnText.textContent = 'ÈôêÂÉπË≤∑ÂÖ•';
            sellBtnText.textContent = 'ÈôêÂÉπË≥£Âá∫';
        } else {
            limitPriceInput.style.display = 'none';
            buyBtnText.textContent = 'Ë≤∑ÂÖ•';
            sellBtnText.textContent = 'Ë≥£Âá∫';
        }
        
        this.updateTradeCosts();
    },

    // ‰øÆÊîπ‰∫§ÊòìËôïÁêÜ‰ª•ÊîØÊè¥ÈôêÂÉπÂñÆ
    async handleTrade(type) {
        const tradeMode = document.querySelector('input[name="tradeMode"]:checked').value;
        const quantity = parseInt(document.getElementById('tradeQuantity').value);
        
        if (!quantity || quantity <= 0) {
            this.showNotification('Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑ‰∫§ÊòìÊï∏Èáè', 'error');
            return;
        }

        if (tradeMode === 'limit') {
            await this.handleLimitTrade(type, quantity);
        } else {
            await this.handleMarketTrade(type, quantity);
        }
    },

    // Â∏ÇÂÉπ‰∫§Êòì
    async handleMarketTrade(type, quantity) {
        try {
            const token = localStorage.getItem('orangeToken');
            if (!token) {
                this.showNotification('Ë´ãÂÖàÁôªÂÖ•', 'error');
                return;
            }

            const response = await fetch(`/api/trading/${type}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ quantity })
            });

            const result = await response.json();
            
            if (result.success) {
                this.showNotification(`${type === 'buy' ? 'Ë≤∑ÂÖ•' : 'Ë≥£Âá∫'}ÊàêÂäüÔºÅ`, 'success');
                
                // Á´ãÂç≥Êõ¥Êñ∞ËÇ°ÂÉπÈ°ØÁ§∫
                if (result.transaction && result.transaction.newPrice) {
                    this.currentPrice = result.transaction.newPrice;
                    this.updateStockPrice({ price: result.transaction.newPrice });
                }
                
                // ÈáçÊñ∞ËºâÂÖ•Áî®Êà∂Ë≥áÁî¢
                await this.loadUserPortfolio();
                
                // Ê∏ÖÁ©∫Ëº∏ÂÖ•Ê°Ü
                const quantityInput = document.getElementById('tradeQuantity');
                if (quantityInput) quantityInput.value = '';
                
            } else {
                this.showNotification(result.message || '‰∫§ÊòìÂ§±Êïó', 'error');
            }
        } catch (error) {
            console.error('‰∫§ÊòìÈåØË™§:', error);
            this.showNotification('‰∫§ÊòìËôïÁêÜÂ§±Êïó', 'error');
        }
    },

    // ÈôêÂÉπ‰∫§Êòì
    async handleLimitTrade(type, quantity) {
        const limitPrice = parseFloat(document.getElementById('limitPrice').value);
        
        if (!limitPrice || limitPrice <= 0) {
            this.showNotification('Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÈôêÂÉπÂÉπÊ†º', 'error');
            return;
        }

        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch('/api/limit-orders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    type,
                    quantity,
                    target_price: limitPrice
                })
            });

            const result = await response.json();
            
            if (result.success) {
                this.showNotification(`ÈôêÂÉπÂñÆÂâµÂª∫ÊàêÂäüÔºÅÁõÆÊ®ôÂÉπÊ†º: $${limitPrice}`, 'success');
                // Ê∏ÖÁ©∫Ë°®ÂñÆ
                document.getElementById('tradeQuantity').value = '1';
                document.getElementById('limitPrice').value = '';
                this.updateTradeCosts();
            } else {
                this.showNotification(result.message || 'ÈôêÂÉπÂñÆÂâµÂª∫Â§±Êïó', 'error');
            }
        } catch (error) {
            console.error('ÈôêÂÉπÂñÆÂâµÂª∫ÈåØË™§:', error);
            this.showNotification('ÈôêÂÉπÂñÆËôïÁêÜÂ§±Êïó', 'error');
        }
    },

    // È°ØÁ§∫ÂÉπÊ†ºË®≠ÁΩÆÊ®°ÊÖãÊ°Ü
    async showPriceSettings() {
        const modal = document.getElementById('priceSettingsModal');
        modal.style.display = 'flex';
        
        // ËºâÂÖ•Áï∂ÂâçË®≠ÁΩÆ
        await this.loadPriceSettings();
    },

    // Èö±ËóèÂÉπÊ†ºË®≠ÁΩÆÊ®°ÊÖãÊ°Ü
    hidePriceSettings() {
        const modal = document.getElementById('priceSettingsModal');
        modal.style.display = 'none';
    },

    // ËºâÂÖ•ÂÉπÊ†ºÂΩ±ÈüøË®≠ÁΩÆ
    async loadPriceSettings() {
        try {
            const response = await fetch('/api/stock/price-impact-settings');
            const result = await response.json();
            
            if (result.success) {
                const settings = result.settings;
                
                // Ë®≠ÁΩÆÊªëÊ°øÂÄº
                document.getElementById('buyImpactMultiplier').value = settings.buyImpactMultiplier;
                document.getElementById('sellImpactMultiplier').value = settings.sellImpactMultiplier;
                document.getElementById('volumeDecayFactor').value = settings.volumeDecayFactor;
                document.getElementById('randomFluctuation').value = settings.randomFluctuation;
                
                // Êõ¥Êñ∞È°ØÁ§∫ÂÄº
                this.updateSliderDisplays();
            }
        } catch (error) {
            console.error('ËºâÂÖ•ÂÉπÊ†ºË®≠ÁΩÆÂ§±Êïó:', error);
            this.showNotification('ËºâÂÖ•Ë®≠ÁΩÆÂ§±Êïó', 'error');
        }
    },

    // Á∂ÅÂÆöÂÉπÊ†ºË®≠ÁΩÆÊªëÊ°ø‰∫ã‰ª∂
    bindPriceSettingsSliders() {
        const sliders = [
            'buyImpactMultiplier',
            'sellImpactMultiplier', 
            'volumeDecayFactor',
            'randomFluctuation'
        ];

        sliders.forEach(id => {
            const slider = document.getElementById(id);
            if (slider) {
                slider.addEventListener('input', () => this.updateSliderDisplays());
            }
        });
    },

    // Êõ¥Êñ∞ÊªëÊ°øÈ°ØÁ§∫ÂÄº
    updateSliderDisplays() {
        const buyImpact = document.getElementById('buyImpactMultiplier').value;
        const sellImpact = document.getElementById('sellImpactMultiplier').value;
        const volumeDecay = document.getElementById('volumeDecayFactor').value;
        const randomFluctuation = document.getElementById('randomFluctuation').value;

        document.getElementById('buyImpactValue').textContent = buyImpact;
        document.getElementById('sellImpactValue').textContent = sellImpact;
        document.getElementById('volumeDecayValue').textContent = volumeDecay;
        document.getElementById('randomFluctuationValue').textContent = (randomFluctuation * 100).toFixed(1) + '%';
    },

    // ‰øùÂ≠òÂÉπÊ†ºË®≠ÁΩÆ
    async savePriceSettings() {
        try {
            const settings = {
                buyImpactMultiplier: parseFloat(document.getElementById('buyImpactMultiplier').value),
                sellImpactMultiplier: parseFloat(document.getElementById('sellImpactMultiplier').value),
                volumeDecayFactor: parseFloat(document.getElementById('volumeDecayFactor').value),
                randomFluctuation: parseFloat(document.getElementById('randomFluctuation').value)
            };

            const response = await fetch('/api/stock/price-impact-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(settings)
            });

            const result = await response.json();
            
            if (result.success) {
                this.showNotification('ÂÉπÊ†ºÂΩ±ÈüøË®≠ÁΩÆÂ∑≤‰øùÂ≠òÔºÅ', 'success');
                this.hidePriceSettings();
            } else {
                this.showNotification('‰øùÂ≠òË®≠ÁΩÆÂ§±Êïó', 'error');
            }
        } catch (error) {
            console.error('‰øùÂ≠òÂÉπÊ†ºË®≠ÁΩÆÂ§±Êïó:', error);
            this.showNotification('‰øùÂ≠òË®≠ÁΩÆÂ§±Êïó', 'error');
        }
    },

    // ÈáçÁΩÆÂÉπÊ†ºË®≠ÁΩÆ
    resetPriceSettings() {
        document.getElementById('buyImpactMultiplier').value = 0.5;
        document.getElementById('sellImpactMultiplier').value = 0.5;
        document.getElementById('volumeDecayFactor').value = 1000;
        document.getElementById('randomFluctuation').value = 0.02;
        
        this.updateSliderDisplays();
        this.showNotification('Ë®≠ÁΩÆÂ∑≤ÈáçÁΩÆÁÇ∫È†êË®≠ÂÄº', 'info');
    },

    // === ËÇ°Á•®‰ø°ÊÅØÈù¢ÊùøÂäüËÉΩ ===
    
    // ÂàáÊèõËÇ°Á•®‰ø°ÊÅØÈù¢Êùø
    toggleStockInfo() {
        const stockInfoSection = document.getElementById('stockInfoSection');
        const chartSection = document.getElementById('chartSection');
        const tradingSection = document.getElementById('tradingSection');
        
        if (stockInfoSection.style.display === 'none' || !stockInfoSection.style.display) {
            // È°ØÁ§∫ËÇ°Á•®‰ø°ÊÅØÈù¢Êùø
            stockInfoSection.style.display = 'block';
            chartSection.style.display = 'none';
            tradingSection.style.display = 'none';
            
            // ËºâÂÖ•ÊâÄÊúâÊï∏Êìö
            this.loadStockInfoData();
            
            // Ë®≠ÁΩÆÂÆöÊúüÊõ¥Êñ∞
            this.startStockInfoUpdates();
        } else {
            // Èö±ËóèËÇ°Á•®‰ø°ÊÅØÈù¢ÊùøÔºåÂõûÂà∞‰∫§ÊòìÁïåÈù¢
            stockInfoSection.style.display = 'none';
            chartSection.style.display = 'block';
            tradingSection.style.display = 'block';
            
            // ÂÅúÊ≠¢ÂÆöÊúüÊõ¥Êñ∞
            this.stopStockInfoUpdates();
        }
    },

    // ËºâÂÖ•ÊâÄÊúâËÇ°Á•®‰ø°ÊÅØÊï∏Êìö
    async loadStockInfoData() {
        await Promise.all([
            this.loadStockDetails(),
            this.loadFiveLevelQuotes(),
            this.loadRecentTrades(),
            this.loadRankings()
        ]);
    },

    // ËºâÂÖ•ËÇ°Á•®Ë©≥Á¥∞‰ø°ÊÅØ
    async loadStockDetails() {
        try {
            const response = await fetch('/api/stock/info');
            const result = await response.json();
            
            if (result.success) {
                const data = result.data;
                
                document.getElementById('detailCurrentPrice').textContent = `$${data.currentPrice.toFixed(2)}`;
                document.getElementById('detailAvgPrice').textContent = `$${data.avgPrice.toFixed(2)}`;
                document.getElementById('detailOpenPrice').textContent = `$${data.openPrice.toFixed(2)}`;
                document.getElementById('detailTodayHigh').textContent = `$${data.todayHigh.toFixed(2)}`;
                document.getElementById('detailTodayLow').textContent = `$${data.todayLow.toFixed(2)}`;
                document.getElementById('detailVolume').textContent = `${data.totalVolume.toLocaleString()} ËÇ°`;
                document.getElementById('detailAmount').textContent = `$${data.totalAmount.toFixed(2)}`;
                document.getElementById('detailTransCount').textContent = `${data.transactionCount} Á≠Ü`;
                
                // Ë®≠ÁΩÆÊº≤Ë∑åÂπÖÈ°èËâ≤
                const changeElement = document.getElementById('detailPriceChange');
                const changeText = `${data.priceChange >= 0 ? '+' : ''}${data.priceChange.toFixed(2)} (${data.priceChangePercent >= 0 ? '+' : ''}${data.priceChangePercent.toFixed(2)}%)`;
                changeElement.textContent = changeText;
                changeElement.className = `info-value ${data.priceChange >= 0 ? 'positive' : 'negative'}`;
            }
        } catch (error) {
            console.error('ËºâÂÖ•ËÇ°Á•®Ë©≥ÊÉÖÂ§±Êïó:', error);
        }
    },

    // ËºâÂÖ•‰∫îÊ™îÂ†±ÂÉπ
    async loadFiveLevelQuotes() {
        try {
            const response = await fetch('/api/stock/quotes');
            const result = await response.json();
            
            if (result.success) {
                const { buyOrders, sellOrders } = result.data;
                this.renderFiveLevelQuotes(buyOrders, sellOrders);
            }
        } catch (error) {
            console.error('ËºâÂÖ•‰∫îÊ™îÂ†±ÂÉπÂ§±Êïó:', error);
        }
    },

    // Ê∏≤Êüì‰∫îÊ™îÂ†±ÂÉπ
    renderFiveLevelQuotes(buyOrders, sellOrders) {
        const quotesContainer = document.getElementById('fiveLevelQuotes');
        
        if (buyOrders.length === 0 && sellOrders.length === 0) {
            quotesContainer.innerHTML = '<div class="quotes-empty">ÁõÆÂâçÊ≤íÊúâÊéõÂñÆ</div>';
            return;
        }
        
        let html = '';
        const maxRows = Math.max(buyOrders.length, sellOrders.length, 5);
        
        for (let i = 0; i < maxRows; i++) {
            const buyOrder = buyOrders[i];
            const sellOrder = sellOrders[i];
            
            html += `
                <div class="quote-row">
                    <span class="quote-price buy">${buyOrder ? `$${buyOrder.price.toFixed(2)}` : '-'}</span>
                    <span class="quote-quantity">${buyOrder ? buyOrder.quantity : '-'}</span>
                    <span class="quote-price sell">${sellOrder ? `$${sellOrder.price.toFixed(2)}` : '-'}</span>
                    <span class="quote-quantity">${sellOrder ? sellOrder.quantity : '-'}</span>
                </div>
            `;
        }
        
        quotesContainer.innerHTML = html;
    },

    // ËºâÂÖ•ËøëÊúü‰∫§ÊòìË®òÈåÑ
    async loadRecentTrades() {
        try {
            const response = await fetch('/api/stock/recent-trades?limit=20');
            const result = await response.json();
            
            if (result.success) {
                this.renderRecentTrades(result.data);
            }
        } catch (error) {
            console.error('ËºâÂÖ•‰∫§ÊòìË®òÈåÑÂ§±Êïó:', error);
        }
    },

    // Ê∏≤ÊüìËøëÊúü‰∫§ÊòìË®òÈåÑ
    renderRecentTrades(trades) {
        const tradesContainer = document.getElementById('recentTradesList');
        
        if (trades.length === 0) {
            tradesContainer.innerHTML = '<div class="trades-empty">Êö´ÁÑ°‰∫§ÊòìË®òÈåÑ</div>';
            return;
        }
        
        const html = trades.map(trade => {
            const time = new Date(trade.timestamp).toLocaleTimeString('zh-TW', {
                hour12: false,
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            
            const trendClass = trade.trend || 'flat';
            const typeClass = trade.type === 'buy' ? 'buy' : 'sell';
            const typeText = trade.type === 'buy' ? 'Ë≤∑ÂÖ•' : 'Ë≥£Âá∫';
            
            return `
                <div class="trade-row">
                    <span class="trade-time">${time}</span>
                    <span class="trade-price ${trendClass}">$${trade.price.toFixed(2)}</span>
                    <span class="trade-quantity">${trade.volume}</span>
                    <span class="trade-type ${typeClass}">${typeText}</span>
                </div>
            `;
        }).join('');
        
        tradesContainer.innerHTML = html;
    },

    // ËºâÂÖ•ÊéíË°åÊ¶ú
    async loadRankings() {
        try {
            const response = await fetch('/api/stock/rankings?limit=10');
            const result = await response.json();
            
            if (result.success) {
                this.renderRankings(result.data);
                
                // Â¶ÇÊûúÂ∑≤ÁôªÂÖ•ÔºåËºâÂÖ•Áî®Êà∂ÊéíÂêç
                if (this.currentUser) {
                    await this.loadUserRank();
                }
            }
        } catch (error) {
            console.error('ËºâÂÖ•ÊéíË°åÊ¶úÂ§±Êïó:', error);
        }
    },

    // Ê∏≤ÊüìÊéíË°åÊ¶ú
    renderRankings(rankings) {
        const rankingsContainer = document.getElementById('rankingsList');
        
        if (rankings.length === 0) {
            rankingsContainer.innerHTML = '<div class="rankings-empty">Êö´ÁÑ°ÊéíË°åÊ¶úÊï∏Êìö</div>';
            return;
        }
        
        const html = rankings.map(rank => {
            const isCurrentUser = this.currentUser && rank.userId === this.currentUser.id;
            const isTop3 = rank.rank <= 3;
            
            return `
                <div class="rank-row ${isCurrentUser ? 'current-user' : ''}">
                    <span class="rank-number ${isTop3 ? 'top3' : ''}">${rank.rank}</span>
                    <span class="rank-username">${rank.username}</span>
                    <span class="rank-value">$${rank.totalValue.toFixed(2)}</span>
                    <span class="rank-trades">${rank.tradeCount}</span>
                </div>
            `;
        }).join('');
        
        rankingsContainer.innerHTML = html;
    },

    // ËºâÂÖ•Áî®Êà∂ÊéíÂêç
    async loadUserRank() {
        try {
            const response = await fetch(`/api/stock/user-rank/${this.currentUser.id}`);
            const result = await response.json();
            
            if (result.success && result.data.rank) {
                const userRankInfo = document.getElementById('userRankInfo');
                const rankNumber = document.getElementById('userRankNumber');
                const totalValue = document.getElementById('userTotalValue');
                
                rankNumber.textContent = `#${result.data.rank}`;
                totalValue.textContent = `$${result.data.total_value.toFixed(2)}`;
                userRankInfo.style.display = 'block';
            }
        } catch (error) {
            console.error('ËºâÂÖ•Áî®Êà∂ÊéíÂêçÂ§±Êïó:', error);
        }
    },

    // ÈñãÂßãÂÆöÊúüÊõ¥Êñ∞ËÇ°Á•®‰ø°ÊÅØ
    startStockInfoUpdates() {
        // Ê∏ÖÈô§ÁèæÊúâÂÆöÊôÇÂô®
        this.stopStockInfoUpdates();
        
        // ÊØè30ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°Êï∏Êìö
        this.stockInfoUpdateInterval = setInterval(() => {
            this.loadStockInfoData();
        }, 30000);
    },

    // ÂÅúÊ≠¢ÂÆöÊúüÊõ¥Êñ∞
    stopStockInfoUpdates() {
        if (this.stockInfoUpdateInterval) {
            clearInterval(this.stockInfoUpdateInterval);
            this.stockInfoUpdateInterval = null;
        }
    },

    // === ÁÆ°ÁêÜÂì°Èù¢ÊùøÂäüËÉΩ ===
    
    // È°ØÁ§∫ÁÆ°ÁêÜÂì°Èù¢Êùø
    showAdminPanel() {
        if (this.currentUser?.role !== 'admin') {
            this.showNotification('ÈúÄË¶ÅÁÆ°ÁêÜÂì°Ê¨äÈôê', 'error');
            return;
        }
        
        const adminPanel = document.getElementById('adminPanelSection');
        if (adminPanel) {
            adminPanel.style.display = 'block';
            this.initAdminPanel();
        }
    },

    // Èö±ËóèÁÆ°ÁêÜÂì°Èù¢Êùø
    hideAdminPanel() {
        const adminPanel = document.getElementById('adminPanelSection');
        if (adminPanel) {
            adminPanel.style.display = 'none';
        }
    },

    // ÂàùÂßãÂåñÁÆ°ÁêÜÂì°Èù¢Êùø
    initAdminPanel() {
        // Á∂ÅÂÆöÊ®ôÁ±§ÂàáÊèõ‰∫ã‰ª∂
        document.querySelectorAll('.admin-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                this.switchAdminTab(tabName);
            });
        });

        // Á∂ÅÂÆöÂêÑÁ®ÆÂäüËÉΩÊåâÈàï
        this.bindAdminEvents();
        
        // ËºâÂÖ•Áµ±Ë®àÊï∏Êìö
        this.loadAdminStats();
    },

    // ÂàáÊèõÁÆ°ÁêÜÂì°Ê®ôÁ±§
    switchAdminTab(tabName) {
        // Êõ¥Êñ∞Ê®ôÁ±§Ê®£Âºè
        document.querySelectorAll('.admin-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // Êõ¥Êñ∞ÂÖßÂÆπÈ°ØÁ§∫
        document.querySelectorAll('.admin-tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(`adminTab${tabName.charAt(0).toUpperCase() + tabName.slice(1)}`).classList.add('active');

        // ËºâÂÖ•Â∞çÊáâÊï∏Êìö
        switch (tabName) {
            case 'stats':
                this.loadAdminStats();
                break;
            case 'users':
                this.loadAdminUsers();
                break;
            case 'settings':
                this.loadAdminSettings();
                break;
            case 'control':
                this.loadPriceControl();
                break;
        }
    },

    // Á∂ÅÂÆöÁÆ°ÁêÜÂì°‰∫ã‰ª∂
    bindAdminEvents() {
        // Âà∑Êñ∞Áî®Êà∂ÂàóË°®
        const refreshUsersBtn = document.getElementById('refreshUsersBtn');
        if (refreshUsersBtn) {
            refreshUsersBtn.addEventListener('click', () => this.loadAdminUsers());
        }

        // ‰øùÂ≠òÊâÄÊúâË®≠ÁΩÆ
        const saveAllSettingsBtn = document.getElementById('saveAllSettingsBtn');
        if (saveAllSettingsBtn) {
            saveAllSettingsBtn.addEventListener('click', () => this.saveAllAdminSettings());
        }

        // Âç±Èö™Êìç‰Ωú
        const resetPricesBtn = document.getElementById('resetPricesBtn');
        if (resetPricesBtn) {
            resetPricesBtn.addEventListener('click', () => this.confirmReset('prices'));
        }

        const resetTradesBtn = document.getElementById('resetTradesBtn');
        if (resetTradesBtn) {
            resetTradesBtn.addEventListener('click', () => this.confirmReset('trades'));
        }

        // ËÇ°ÂÉπË™øÊï¥
        const adjustPriceBtn = document.getElementById('adjustPriceBtn');
        if (adjustPriceBtn) {
            adjustPriceBtn.addEventListener('click', () => this.adjustStockPrice());
        }

        // ÊâìÈñãÂÉπÊ†ºÂΩ±ÈüøË®≠ÁΩÆ
        const openPriceImpactBtn = document.getElementById('openPriceImpactBtn');
        if (openPriceImpactBtn) {
            openPriceImpactBtn.addEventListener('click', () => this.showPriceSettings());
        }
    },

    // ËºâÂÖ•ÁÆ°ÁêÜÂì°Áµ±Ë®àÊï∏Êìö
    async loadAdminStats() {
        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch('/api/stock/admin/stats', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            const result = await response.json();
            if (result.success) {
                const stats = result.stats;
                
                // Êõ¥Êñ∞Áî®Êà∂Áµ±Ë®à
                document.getElementById('totalUsers').textContent = stats.users.total_users || 0;
                document.getElementById('adminUsers').textContent = stats.users.admin_users || 0;
                document.getElementById('newUsersToday').textContent = stats.users.new_users_today || 0;
                
                // Êõ¥Êñ∞‰∫§ÊòìÁµ±Ë®à
                document.getElementById('totalTrades').textContent = stats.trades.total_trades || 0;
                document.getElementById('tradesToday').textContent = stats.trades.trades_today || 0;
                document.getElementById('totalVolume').textContent = `$${(stats.trades.total_volume || 0).toFixed(2)}`;
                
                // Êõ¥Êñ∞ËÇ°Á•®Áµ±Ë®à
                document.getElementById('adminCurrentPrice').textContent = `$${stats.currentPrice.toFixed(2)}`;
                document.getElementById('admin24hHigh').textContent = `$${(stats.stock.maxPrice24h || stats.currentPrice).toFixed(2)}`;
                document.getElementById('admin24hLow').textContent = `$${(stats.stock.minPrice24h || stats.currentPrice).toFixed(2)}`;
            }
        } catch (error) {
            console.error('ËºâÂÖ•ÁÆ°ÁêÜÂì°Áµ±Ë®àÂ§±Êïó:', error);
            this.showNotification('ËºâÂÖ•Áµ±Ë®àÊï∏ÊìöÂ§±Êïó', 'error');
        }
    },

    // ËºâÂÖ•Áî®Êà∂ÁÆ°ÁêÜÊï∏Êìö
    async loadAdminUsers() {
        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch('/api/stock/admin/users', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            const result = await response.json();
            if (result.success) {
                this.renderUsersTable(result.users);
            }
        } catch (error) {
            console.error('ËºâÂÖ•Áî®Êà∂ÂàóË°®Â§±Êïó:', error);
            this.showNotification('ËºâÂÖ•Áî®Êà∂ÂàóË°®Â§±Êïó', 'error');
        }
    },

    // Ê∏≤ÊüìÁî®Êà∂Ë°®Ê†º
    renderUsersTable(users) {
        const tbody = document.getElementById('usersTableBody');
        
        if (users.length === 0) {
            tbody.innerHTML = '<tr><td colspan="9" class="loading-row">Ê≤íÊúâÁî®Êà∂Êï∏Êìö</td></tr>';
            return;
        }

        const html = users.map(user => {
            const date = new Date(user.created_at).toLocaleDateString('zh-TW');
            const roleClass = user.role === 'admin' ? 'role-admin' : 'role-user';
            
            return `
                <tr>
                    <td>${user.id}</td>
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td><span class="role-badge ${roleClass}">${user.role}</span></td>
                    <td>${user.points}</td>
                    <td>${user.shares} ËÇ°</td>
                    <td>${user.trade_count}</td>
                    <td>${date}</td>
                    <td>
                        <button class="user-action-btn" onclick="orangeApp.toggleUserRole(${user.id}, '${user.role}')">
                            ${user.role === 'admin' ? 'ÈôçÁÇ∫Áî®Êà∂' : 'ÂçáÁÇ∫ÁÆ°ÁêÜÂì°'}
                        </button>
                    </td>
                </tr>
            `;
        }).join('');
        
        tbody.innerHTML = html;
    },

    // ÂàáÊèõÁî®Êà∂ËßíËâ≤
    async toggleUserRole(userId, currentRole) {
        const newRole = currentRole === 'admin' ? 'user' : 'admin';
        
        if (!confirm(`Á¢∫ÂÆöË¶ÅÂ∞áÊ≠§Áî®Êà∂${currentRole === 'admin' ? 'ÈôçÁÇ∫ÊôÆÈÄöÁî®Êà∂' : 'ÂçáÁÇ∫ÁÆ°ÁêÜÂì°'}ÂóéÔºü`)) {
            return;
        }

        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch(`/api/stock/admin/users/${userId}/role`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ role: newRole })
            });
            
            const result = await response.json();
            if (result.success) {
                this.showNotification('Áî®Êà∂ËßíËâ≤Â∑≤Êõ¥Êñ∞', 'success');
                this.loadAdminUsers(); // ÈáçÊñ∞ËºâÂÖ•Áî®Êà∂ÂàóË°®
            } else {
                this.showNotification(result.message || 'ËßíËâ≤Êõ¥Êñ∞Â§±Êïó', 'error');
            }
        } catch (error) {
            console.error('Êõ¥Êñ∞Áî®Êà∂ËßíËâ≤Â§±Êïó:', error);
            this.showNotification('ËßíËâ≤Êõ¥Êñ∞Â§±Êïó', 'error');
        }
    },

    // ËºâÂÖ•Á≥ªÁµ±Ë®≠ÁΩÆ
    async loadAdminSettings() {
        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch('/api/stock/admin/settings', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            const result = await response.json();
            if (result.success) {
                this.renderAdminSettings(result.settings);
            }
        } catch (error) {
            console.error('ËºâÂÖ•Á≥ªÁµ±Ë®≠ÁΩÆÂ§±Êïó:', error);
            this.showNotification('ËºâÂÖ•Á≥ªÁµ±Ë®≠ÁΩÆÂ§±Êïó', 'error');
        }
    },

    // Ê∏≤ÊüìÁ≥ªÁµ±Ë®≠ÁΩÆ
    renderAdminSettings(settings) {
        const container = document.getElementById('adminSettingsList');
        
        if (settings.length === 0) {
            container.innerHTML = '<div class="loading-settings">Ê≤íÊúâË®≠ÁΩÆÈ†ÖÁõÆ</div>';
            return;
        }

        const html = settings.map(setting => `
            <div class="setting-item">
                <div class="setting-info">
                    <div class="setting-name">${setting.setting_key}</div>
                    <div class="setting-description">${setting.description || 'ÁÑ°ÊèèËø∞'}</div>
                </div>
                <div class="setting-control">
                    <input type="text" class="setting-input" 
                           data-key="${setting.setting_key}" 
                           value="${setting.setting_value}"
                           placeholder="Ë®≠ÁΩÆÂÄº">
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    },

    // ‰øùÂ≠òÊâÄÊúâÁÆ°ÁêÜÂì°Ë®≠ÁΩÆ
    async saveAllAdminSettings() {
        const inputs = document.querySelectorAll('.setting-input');
        const token = localStorage.getItem('orangeToken');
        let successCount = 0;

        for (const input of inputs) {
            try {
                const response = await fetch(`/api/stock/admin/settings/${input.dataset.key}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ value: input.value })
                });
                
                if (response.ok) {
                    successCount++;
                }
            } catch (error) {
                console.error(`‰øùÂ≠òË®≠ÁΩÆ ${input.dataset.key} Â§±Êïó:`, error);
            }
        }

        this.showNotification(`ÊàêÂäü‰øùÂ≠ò ${successCount}/${inputs.length} ÂÄãË®≠ÁΩÆ`, 'success');
    },

    // ËºâÂÖ•ËÇ°ÂÉπÊéßÂà∂
    loadPriceControl() {
        // Êõ¥Êñ∞Áï∂ÂâçËÇ°ÂÉπÈ°ØÁ§∫
        const currentPrice = this.currentPrice || 10.00;
        document.getElementById('controlCurrentPrice').textContent = `$${currentPrice.toFixed(2)}`;
    },

    // Ë™øÊï¥ËÇ°ÂÉπ
    async adjustStockPrice() {
        const newPrice = parseFloat(document.getElementById('newStockPrice').value);
        const reason = document.getElementById('adjustReason').value || 'ÁÆ°ÁêÜÂì°Ë™øÊï¥';

        if (!newPrice || newPrice <= 0) {
            this.showNotification('Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑËÇ°ÂÉπ', 'error');
            return;
        }

        if (!confirm(`Á¢∫ÂÆöË¶ÅÂ∞áËÇ°ÂÉπË™øÊï¥ÁÇ∫ $${newPrice.toFixed(2)} ÂóéÔºü\nÂéüÂõ†Ôºö${reason}`)) {
            return;
        }

        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch('/api/stock/admin/adjust-price', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ newPrice, reason })
            });
            
            const result = await response.json();
            if (result.success) {
                this.showNotification(`ËÇ°ÂÉπÂ∑≤Ë™øÊï¥ÁÇ∫ $${result.newPrice.toFixed(2)}`, 'success');
                
                // Êõ¥Êñ∞È°ØÁ§∫
                this.currentPrice = result.newPrice;
                document.getElementById('controlCurrentPrice').textContent = `$${result.newPrice.toFixed(2)}`;
                
                // Ê∏ÖÁ©∫Ë°®ÂñÆ
                document.getElementById('newStockPrice').value = '';
                document.getElementById('adjustReason').value = '';
                
                // Êõ¥Êñ∞Áµ±Ë®àÊï∏Êìö
                this.loadAdminStats();
            } else {
                this.showNotification(result.message || 'ËÇ°ÂÉπË™øÊï¥Â§±Êïó', 'error');
            }
        } catch (error) {
            console.error('Ë™øÊï¥ËÇ°ÂÉπÂ§±Êïó:', error);
            this.showNotification('ËÇ°ÂÉπË™øÊï¥Â§±Êïó', 'error');
        }
    },

    // Á¢∫Ë™çÈáçÁΩÆÊìç‰Ωú
    confirmReset(type) {
        const typeNames = {
            prices: 'ËÇ°ÂÉπÊ≠∑Âè≤',
            trades: '‰∫§ÊòìË®òÈåÑ'
        };
        
        const typeName = typeNames[type];
        if (!confirm(`‚ö†Ô∏è Ë≠¶ÂëäÔºÅ\n\nÊ≠§Êìç‰ΩúÂ∞áÊ∞∏‰πÖÂà™Èô§ÊâÄÊúâ${typeName}Ôºå‰∏îÁÑ°Ê≥ïÊÅ¢Âæ©ÔºÅ\n\nÁ¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü`)) {
            return;
        }

        if (!confirm(`ÊúÄÂæåÁ¢∫Ë™çÔºöÁúüÁöÑË¶ÅÈáçÁΩÆ${typeName}ÂóéÔºü\n\nÊ≠§Êìç‰Ωú‰∏çÂèØÈÄÜÔºÅ`)) {
            return;
        }

        this.performReset(type);
    },

    // Âü∑Ë°åÈáçÁΩÆÊìç‰Ωú
    async performReset(type) {
        try {
            const token = localStorage.getItem('orangeToken');
            const response = await fetch('/api/stock/admin/reset-system', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ resetType: type })
            });
            
            const result = await response.json();
            if (result.success) {
                this.showNotification(result.message, 'success');
                this.loadAdminStats(); // ÈáçÊñ∞ËºâÂÖ•Áµ±Ë®àÊï∏Êìö
            } else {
                this.showNotification(result.message || 'ÈáçÁΩÆÂ§±Êïó', 'error');
            }
        } catch (error) {
            console.error('ÈáçÁΩÆÊìç‰ΩúÂ§±Êïó:', error);
            this.showNotification('ÈáçÁΩÆÊìç‰ΩúÂ§±Êïó', 'error');
        }
    }
});

// ÂïüÂãïÊáâÁî®Á®ãÂºè
document.addEventListener('DOMContentLoaded', () => {
    try {
        window.orangeApp = new OrangeStockApp();
        console.log('üçä Orange Stock ÊáâÁî®Á®ãÂºèÂ∑≤ÂïüÂãï');
    } catch (error) {
        console.error('ÊáâÁî®Á®ãÂºèÂïüÂãïÂ§±Êïó:', error);
        
        // Èö±ËóèËºâÂÖ•Áï´Èù¢Âç≥‰ΩøÂá∫ÈåØ
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) overlay.style.display = 'none';
    }
}); 